{"version":3,"sources":["Componants/CornerGithub.js","Componants/SetTimer.js","Componants/Timer.js","Componants/Controls.js","Componants/Pomodoro.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CornerGithub","react_default","a","createElement","GithubCorner_default","target","href","bannerColor","Component","SetTimer","_ref","type","value","handleClick","className","id","concat","onClick","Timer","mode","time","Controls","active","handleReset","hanlePlayPause","Pomodoro","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSetTimers","inc","state","setState","defineProperty","breakValue","sessionValue","touched","clearInterval","audio","pause","currentTime","handlePlayPause","setInterval","prevProps","prevState","play","_this2","Componants_SetTimer","Componants_Timer","moment","format","Componants_Controls","src","ref","el","React","Header","App","CornerGithub_CornerGithub","logo","alt","rel","App_Header","Pomodoro_Pomodoro","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e8aa6b63.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport GithubCorner from 'react-github-corner';\r\n\r\nexport default class CornerGithub extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <GithubCorner\r\n         target='_blank'\r\n        href=\"https://github.com/Samk13\"\r\n        bannerColor=\"#61dafb\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nconst SetTimer = ({type, value, handleClick})=> (\r\n    <div className='SetTimer'>\r\n        <h1 id ={`${type}-label`}>\r\n\r\n            {type === 'session' ? 'Session ':'Break '} Length\r\n\r\n        </h1>\r\n        <div className='SetTimer-controls'>\r\n\r\n            <button id={`${type}-decrement`} onClick={() => handleClick(false, `${type}Value`)}\r\n            >\r\n\r\n            <span className=\" fas fa-arrow-circle-down\"></span>\r\n\r\n\r\n            </button>\r\n\r\n            <div id={`${type}-length`}>\r\n            {value}\r\n            </div>\r\n\r\n\r\n            <button id={`${type}-increment`}\r\n            onClick={()=> handleClick(true, `${type}Value`)}>\r\n            <span className=\" fas fa-arrow-circle-up\"></span>\r\n\r\n            </button>\r\n            \r\n        </div>\r\n\r\n    </div>\r\n)\r\n\r\n\r\nexport default SetTimer;","import React from 'react';\r\n\r\n\r\n const Timer = ({mode, time}) => (\r\n<div className='Timer'>\r\n    <h1 id='timer-label'>{mode === 'session' ? 'Session' : 'Break'}</h1>\r\n    <h1 id='time-left'>{time}</h1>\r\n</div>\r\n)\r\n\r\n\r\n\r\nexport default Timer;","import React from 'react';\r\n\r\n\r\nconst Controls = ({active, handleReset, hanlePlayPause}) => (\r\n    <div className='Controls'>\r\n        <button id='start_stop'\r\n        onClick={hanlePlayPause}\r\n        \r\n        >\r\n            {active ? <span className=\" fas fa-pause-circle\">\r\n\r\n            </span> : <span className=\" fas fa-play-circle\"></span> \r\n            }\r\n            \r\n            </button>\r\n        <button id='reset'\r\n        onClick={handleReset}\r\n        >\r\n        <span className=\" fas fa-stop-circle\"></span>\r\n        </button>\r\n\r\n    </div>\r\n\r\n);\r\n\r\nexport default Controls;","import React from \"react\";\r\nimport SetTimer from \"./SetTimer\";\r\nimport Timer from \"./Timer\";\r\nimport moment from \"moment\";\r\nimport Controls from \"./Controls\";\r\n\r\n\r\n//---------------------------------------------------------------------------------------------------------------------\r\n\r\nexport default class Pomodoro extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      breakValue: 5,\r\n      sessionValue: 25,\r\n      mode: \"session\",\r\n      time: 25 * 60 * 1000,\r\n      active: false,\r\n      touched: false\r\n    };\r\n  }\r\n\r\n\r\n// set the increment and decrement buttons for both session and break -----------------------------------------------\r\n  handleSetTimers = (inc, type) => {\r\n    if (this.state[type] === 60 && inc) return;\r\n    if (this.state[type] === 1 && !inc) return;\r\n    this.setState({ [type]: this.state[type] + (inc ? 1 : -1) });\r\n  };\r\n// reset button Logic -----------------------------------------------------reset button Logic-\r\n  handleReset = () => {\r\n    this.setState({\r\n      breakValue: 5,\r\n      sessionValue: 25,\r\n      time: 25 * 60 * 1000,\r\n      touched: false,\r\n      active: false\r\n    });\r\n    this.setState({\r\n        active: false\r\n      });\r\n    //--------------------------------------------------clearInterval\r\n    clearInterval(this.Pomodoro);\r\n    this.audio.pause()\r\n    this.audio.currentTime = 0\r\n\r\n\r\n  };\r\n\r\n\r\n  // transition from session to break and viceversa ----------------------------Transiton\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.time === 0 && prevState.mode === \"session\") {\r\n      this.setState({\r\n        time: this.state.breakValue * 60 * 1000,\r\n        mode: \"break\"\r\n      });\r\n      this.audio.play()\r\n    }\r\n    if (prevState.time === 0 && prevState.mode === 'break') {\r\n        this.setState({\r\n            time : this.state.sessionValue *60 *1000,\r\n            mode: 'session'\r\n            \r\n        })\r\n\r\n    this.audio.play()\r\n    }\r\n  }\r\n\r\n  // pla pause button logic -------------------------------------------------logic -\r\n  handlePlayPause = () => {\r\n    if (this.state.active) {\r\n      clearInterval(this.Pomodoro);\r\n\r\n\r\n      this.setState({ active: false });\r\n    } else {\r\n      if (this.state.touched) {\r\n        this.Pomodoro = setInterval(\r\n          () =>\r\n            this.setState({\r\n              time: this.state.time - 1000\r\n            }),\r\n          1000\r\n        );\r\n        this.setState({ active: true });\r\n      } else {\r\n        this.setState(\r\n          {\r\n            time: this.state.sessionValue * 60 * 1000,\r\n            touched: true,\r\n            active: true\r\n          },\r\n          () =>\r\n            (this.Pomodoro = setInterval(\r\n              () =>\r\n                this.setState({\r\n                  time: this.state.time - 1000\r\n                }),\r\n              1000\r\n            ))\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // --------------------------------------------------------------------Render |||||||---\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"container-controls\">\r\n\r\n        <div className=\"settings\">\r\n         {/*-------------------------------------------------------Break- */}\r\n          <SetTimer\r\n            type=\"break\"\r\n            value={this.state.breakValue}\r\n            handleClick={this.handleSetTimers}\r\n          />\r\n          {/*---------------------------------------------------Session-- */}\r\n          <SetTimer\r\n            type=\"session\"\r\n            value={this.state.sessionValue}\r\n            handleClick={this.handleSetTimers}\r\n          />\r\n        </div>\r\n        {/*------------------------------------------------------Timer -- */}\r\n        <Timer\r\n          \r\n          mode={this.state.mode}\r\n          time={moment(this.state.time).format(\"mm.ss\")}\r\n          id=\"time-left\"\r\n        />\r\n        {/*----------------------------------------------------Controls-- */}\r\n        <Controls\r\n          active={this.state.active}\r\n          handleReset={this.handleReset}\r\n          hanlePlayPause={this.handlePlayPause}\r\n        />\r\n        {/*-------------------------------------------------------Audio-- */}\r\n\r\n        <audio \r\n        id='beep'\r\n        src='http://soundbible.com/grab.php?id=1598&type=mp3'\r\n        ref={el => this.audio = el}\r\n        >\r\n\r\n        </audio>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CornerGithub from \"./Componants/CornerGithub\";\nimport Pomodoro from \"./Componants/Pomodoro\";\n\nconst Header = () => <h1>Pomodoro Clock</h1>;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CornerGithub />\n      <img\n        src={logo}\n        className=\"App-logo\"\n        alt=\"logo\"\n        href=\"https://reactjs.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      />\n      <header className=\"App-header\" />\n      <div className=\"container1\">\n        <Header />\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}